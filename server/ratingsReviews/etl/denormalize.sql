DROP TABLE IF EXISTS reviewsV2 CASCADE;
-- DROP TABLE IF EXISTS characteristicsV2;

DROP INDEX IF EXISTS idx_reviewsV2_product_id;
-- DROP INDEX IF EXISTS idx_charsV2_product_id;

CREATE TABLE reviewsV2 (
  review_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  product_id INT,
  rating INT,
  date TIMESTAMPTZ,
  summary TEXT,
  body TEXT,
  recommend BOOLEAN,
  reported BOOLEAN DEFAULT false,
  reviewer_name TEXT,
  reviewer_email TEXT,
  response TEXT DEFAULT null,
  helpfulness INT DEFAULT 0,
  photos JSONB
);

-- CREATE TABLE characteristicsV2 (
--   id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   product_id INT,
--   name TEXT
-- );

CREATE INDEX idx_reviewsV2_product_id ON reviewsV2(product_id);
-- CREATE INDEX idx_charsV2_product_id ON characteristicsV2(product_id);

INSERT INTO reviewsV2 (product_id, rating, date, summary, body, recommend, reported, reviewer_name, reviewer_email, response, helpfulness, photos)
SELECT product_id, rating, date, summary, body, recommend, reported, reviewer_name, reviewer_email, response, helpfulness, JSONB_AGG(JSONB_BUILD_OBJECT('id', id, 'url', url) ORDER BY id) AS photos
  FROM reviews AS r
  LEFT JOIN reviews_photos AS p ON r.review_id=p.review_id
  GROUP BY r.review_id;

-- INSERT INTO characteristicsV2 (product_id, review_id, characteristics)
-- SELECT s.product_id, JSONB_OBJECT_AGG(name, characteristics) AS characteristics
--   FROM (
--     SELECT c.product_id, c.name,
--       JSONB_BUILD_OBJECT('id', c.id, 'value', ROUND(AVG(cr.value),4)) AS characteristics
--       FROM characteristic_reviews AS cr
--       JOIN characteristics AS c ON c.id=cr.characteristic_id
--       WHERE c.product_id=965029
--       GROUP BY c.id, c.name
--   ) AS s
--   GROUP BY s.product_id;

-- Execute this file from the command line by typing:
-- psql reviews < server/ratingsReviews/etl/denormalize.sql

-- To login to postgres reviews database on CL enter:
-- psql reviews